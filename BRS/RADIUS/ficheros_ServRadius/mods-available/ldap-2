ldap {
  server= 'radius-openldap.ciber.local'
  port = 389
  base_dn = 'ou=DepInformatica,dc=ciber,dc=local'
  identity = 'cn=admin,dc=ciber,dc=local'
  password = 'Camina-100'

  sasl {
  }
  update {
      control:Password-With-Header    += 'userPassword'
      control:NT-Password             := 'sambaNTPassword'
      control:LM-Password	      := 'sambaLMPassword'
      control:            += 'radiusControlAttribute'
      request:            += 'radiusRequestAttribute'
      reply:              += 'radiusReplyAttribute'
  }
  user {
      base_dn = "ou=DepInformatica,dc=ciber,dc=local"
      filter = "(uid=%{%{Stripped-User-Name}:-%{User-Name}})"
      sasl {
      }
  }
  group {
      base_dn = "ou=grupos,ou=DepInformatica,dc=ciber,dc=local"
      filter = '(objectClass=GroupOfNames)'
      membership_filter = "(|(&(objectClass=GroupOfNames)(member=%{control:Ldap-UserDn}))(&(objectClass=GroupOfNames)(member=%{control:Ldap-UserDn})))"
      membership_attribute = 'memberOf'
  }
  profile {
  }
  client {
      base_dn = "${..base_dn}"
      filter = '(objectClass=radiusClient)'
      template {
      }
      attribute {
          ipaddr              = 'radiusClientIdentifier'
          secret              = 'radiusClientSecret'
      }
  }
  accounting {
      reference = "%{tolower:type.%{Acct-Status-Type}}"
      type {
          start {
              update {
                  description := "Online at %S"
              }
          }
          interim-update {
              update {
                  description := "Last seen at %S"
              }
          }
          stop {
              update {
                  description := "Offline at %S"
              }
          }
      }
  }
  post-auth {
      update {
          description := "Authenticated at %S"
      }
  }
  options {
      chase_referrals = yes
      rebind = yes
      res_timeout = 10
      srv_timelimit = 3
      net_timeout = 1
      idle = 60
      probes = 3
      interval = 3
      ldap_debug = 0x0028
  }
  tls {
  }
  pool {
      start = ${thread[pool].start_servers}
      min = ${thread[pool].min_spare_servers}
      max = ${thread[pool].max_servers}
      spare = ${thread[pool].max_spare_servers}
      uses = 0
      retry_delay = 30
      lifetime = 0
      idle_timeout = 60
  }
}
